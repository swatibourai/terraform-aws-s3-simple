pipeline {
    agent any

    environment {
        SEAL_ID = '112175'
        GIT_REPO_NAME = 's3-module'
        IS_PR_BUILD = env.BRANCH_NAME.startsWith("PR-")
        NEW_VERSION = ''
        SUBMIT_JET_EVENTS = true
        DEPLOYMENT_TOOL = 'other'
        HARNESS_ORG_ID = 'default'
        HARNESS_PROJECT_ID = 'default_project'
        HARNESS_PIPELINE_ID = "testpipeline"
        HARNESS_PIPELINE_TRIGGER_ID = "testtrigger"
    }

    stages {
        stage('Trigger harness to TFC workflow: Harness DEV') {
            steps {
                script {
                    def responseJson = customharnessTrigger(
                        env.HARNESS_ORG_ID,
                        env.HARNESS_PROJECT_ID,
                        env.HARNESS_PIPELINE_ID,
                        env.HARNESS_PIPELINE_TRIGGER_ID
                    )

                   if (responseJson?.status == "SUCCESS") {
                      echo "✅ Harness pipeline execution was successful"
                      echo "Event Correlation Id: ${responseJson.data.eventCorrelationId}"
                      echo "Track execution here: ${responseJson.data.uiUrl}"
                        } else {
                       error("❌ Harness pipeline failed: ${responseJson}")
                        }

                }
            }
        }
    }
}

def customharnessTrigger(orgIdentifier, projectIdentifier, pipelineIdentifier, triggerIdentifier, params = '{}', harnessCredentialsId = 'HARNESS_CREDS', containerName = 'curl') {
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: harnessCredentialsId, passwordVariable: 'HARNESS_API_KEY', usernameVariable: 'ACCOUNT_IDENTIFIER']]) {
      triggerPipelineResponse = sh(script: """
        curl -s -X POST \
         -H 'content-type: application/json' \
         -H 'X-Api-Key: ${HARNESS_API_KEY}' \
         --url 'https://app.harness.io/gateway/pipeline/api/webhook/custom/Nv8yWCR2Shql1FQL1smObw/v3?accountIdentifier=${ACCOUNT_IDENTIFIER}&orgIdentifier=${orgIdentifier}&projectIdentifier=${projectIdentifier}&pipelineIdentifier=${pipelineIdentifier}&triggerIdentifier=${triggerIdentifier}' \
         -d '${params}'
      """,
              returnStdout: true)

      triggerPipelineResponseJSON = readJSON text: triggerPipelineResponse
      catchError(stageResult: 'UNSTABLE', buildResult: currentBuild.result) {
        if (triggerPipelineResponseJSON.status == "ERROR") {
          println triggerPipelineResponse
          error(triggerPipelineResponseJSON.message)
        } else if(triggerPipelineResponseJSON.data && triggerPipelineResponseJSON.data.apiUrl) {
          sleep(30) // It takes between 20 to 30 seconds for harness to trigger the pipeline execution
          retry(3) {
            getExecutionResponse = sh(script: """
              curl -s -X GET \
              -H 'content-type: application/json' \
              -H 'X-Api-Key: ${HARNESS_API_KEY}' \
              --url '${triggerPipelineResponseJSON.data.apiUrl}'
            """, returnStdout: true)
            def getExecutionResponseJSON = readJSON text: getExecutionResponse

            if(getExecutionResponseJSON.status == "ERROR") {
              sleep(5)
              error(getExecutionResponseJSON.message)
            } else if (getExecutionResponseJSON.data && getExecutionResponseJSON.data.webhookProcessingDetails.exceptionOccured == true) {
              // Handle trigger conditions errors
              error(getExecutionResponseJSON.data.webhookProcessingDetails.message)
            } else if (getExecutionResponseJSON.data && getExecutionResponseJSON.data.executionUrl) {
              println "EXECUTION URL"
              println getExecutionResponseJSON.data.executionUrl
              return getExecutionResponseJSON
            }
          }
        }
      }
    }
  }
}
